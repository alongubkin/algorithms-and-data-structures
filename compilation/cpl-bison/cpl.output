Grammar

    0 $accept: program $end

    1 program: declarations stmt_block

    2 declarations: declarations declaration
    3             | /* empty */

    4 declaration: idlist ':' type ';'

    5 type: INT
    6     | FLOAT

    7 idlist: idlist ',' ID
    8       | ID

    9 stmt: assignment_stmt
   10     | input_stmt
   11     | output_stmt
   12     | cast_stmt
   13     | if_stmt
   14     | while_stmt
   15     | switch_stmt
   16     | break_stmt
   17     | stmt_block

   18 assignment_stmt: ID '=' expression ';'

   19 input_stmt: INPUT '(' ID ')' ';'

   20 output_stmt: OUTPUT '(' expression ')' ';'

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' '(' expression ')' ';'

   22 if_stmt: IF ')' boolexpr '(' stmt ELSE stmt

   23 while_stmt: WHILE ')' boolexpr '(' stmt

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist DEFAULT ':' stmtlist '}'

   25 caselist: caselist CASE NUM ':' stmtlist
   26         | /* empty */

   27 break_stmt: BREAK ';'

   28 stmt_block: '{' stmtlist '}'

   29 stmtlist: stmtlist stmt
   30         | /* empty */

   31 boolexpr: boolexpr OR boolterm
   32         | /* empty */

   33 boolterm: boolterm AND boolfactor
   34         | /* empty */

   35 boolfactor: NOT '(' boolexpr ')'
   36           | expression RELOP expression

   37 expression: expression ADDOP term
   38           | term

   39 term: term MULOP factor
   40     | factor

   41 factor: '(' expression ')'
   42       | ID
   43       | NUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 19 20 21 22 23 24 35 41
')' (41) 19 20 21 22 23 24 35 41
',' (44) 7
':' (58) 4 24 25
';' (59) 4 18 19 20 21 27
'=' (61) 18 21
'{' (123) 24 28
'}' (125) 24 28
error (256)
BREAK (258) 27
CASE (259) 25
DEFAULT (260) 24
ELSE (261) 22
FLOAT (262) 6
IF (263) 22
INPUT (264) 19
INT (265) 5
OUTPUT (266) 20
STATIC_CAST (267) 21
SWITCH (268) 24
WHILE (269) 23
RELOP (270) 36
ADDOP (271) 37
MULOP (272) 39
OR (273) 31
AND (274) 33
NOT (275) 35
ID (276) 7 8 18 19 21 42
NUM (277) 25 43


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
declarations (33)
    on left: 2 3, on right: 1 2
declaration (34)
    on left: 4, on right: 2
type (35)
    on left: 5 6, on right: 4 21
idlist (36)
    on left: 7 8, on right: 4 7
stmt (37)
    on left: 9 10 11 12 13 14 15 16 17, on right: 22 23 29
assignment_stmt (38)
    on left: 18, on right: 9
input_stmt (39)
    on left: 19, on right: 10
output_stmt (40)
    on left: 20, on right: 11
cast_stmt (41)
    on left: 21, on right: 12
if_stmt (42)
    on left: 22, on right: 13
while_stmt (43)
    on left: 23, on right: 14
switch_stmt (44)
    on left: 24, on right: 15
caselist (45)
    on left: 25 26, on right: 24 25
break_stmt (46)
    on left: 27, on right: 16
stmt_block (47)
    on left: 28, on right: 1 17
stmtlist (48)
    on left: 29 30, on right: 24 25 28 29
boolexpr (49)
    on left: 31 32, on right: 22 23 31 35
boolterm (50)
    on left: 33 34, on right: 31 33
boolfactor (51)
    on left: 35 36, on right: 33
expression (52)
    on left: 37 38, on right: 18 20 21 24 36 37 41
term (53)
    on left: 39 40, on right: 37 38 39
factor (54)
    on left: 41 42 43, on right: 39 40


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (declarations)

    program       go to state 1
    declarations  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: declarations . stmt_block
    2 declarations: declarations . declaration

    ID   shift, and go to state 4
    '{'  shift, and go to state 5

    declaration  go to state 6
    idlist       go to state 7
    stmt_block   go to state 8


state 3

    0 $accept: program $end .

    $default  accept


state 4

    8 idlist: ID .

    $default  reduce using rule 8 (idlist)


state 5

   28 stmt_block: '{' . stmtlist '}'

    $default  reduce using rule 30 (stmtlist)

    stmtlist  go to state 9


state 6

    2 declarations: declarations declaration .

    $default  reduce using rule 2 (declarations)


state 7

    4 declaration: idlist . ':' type ';'
    7 idlist: idlist . ',' ID

    ':'  shift, and go to state 10
    ','  shift, and go to state 11


state 8

    1 program: declarations stmt_block .

    $default  reduce using rule 1 (program)


state 9

   28 stmt_block: '{' stmtlist . '}'
   29 stmtlist: stmtlist . stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5
    '}'     shift, and go to state 19

    stmt             go to state 20
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 10

    4 declaration: idlist ':' . type ';'

    FLOAT  shift, and go to state 30
    INT    shift, and go to state 31

    type  go to state 32


state 11

    7 idlist: idlist ',' . ID

    ID  shift, and go to state 33


state 12

   27 break_stmt: BREAK . ';'

    ';'  shift, and go to state 34


state 13

   22 if_stmt: IF . ')' boolexpr '(' stmt ELSE stmt

    ')'  shift, and go to state 35


state 14

   19 input_stmt: INPUT . '(' ID ')' ';'

    '('  shift, and go to state 36


state 15

   20 output_stmt: OUTPUT . '(' expression ')' ';'

    '('  shift, and go to state 37


state 16

   24 switch_stmt: SWITCH . '(' expression ')' '{' caselist DEFAULT ':' stmtlist '}'

    '('  shift, and go to state 38


state 17

   23 while_stmt: WHILE . ')' boolexpr '(' stmt

    ')'  shift, and go to state 39


state 18

   18 assignment_stmt: ID . '=' expression ';'
   21 cast_stmt: ID . '=' STATIC_CAST '(' type ')' '(' expression ')' ';'

    '='  shift, and go to state 40


state 19

   28 stmt_block: '{' stmtlist '}' .

    $default  reduce using rule 28 (stmt_block)


state 20

   29 stmtlist: stmtlist stmt .

    $default  reduce using rule 29 (stmtlist)


state 21

    9 stmt: assignment_stmt .

    $default  reduce using rule 9 (stmt)


state 22

   10 stmt: input_stmt .

    $default  reduce using rule 10 (stmt)


state 23

   11 stmt: output_stmt .

    $default  reduce using rule 11 (stmt)


state 24

   12 stmt: cast_stmt .

    $default  reduce using rule 12 (stmt)


state 25

   13 stmt: if_stmt .

    $default  reduce using rule 13 (stmt)


state 26

   14 stmt: while_stmt .

    $default  reduce using rule 14 (stmt)


state 27

   15 stmt: switch_stmt .

    $default  reduce using rule 15 (stmt)


state 28

   16 stmt: break_stmt .

    $default  reduce using rule 16 (stmt)


state 29

   17 stmt: stmt_block .

    $default  reduce using rule 17 (stmt)


state 30

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


state 31

    5 type: INT .

    $default  reduce using rule 5 (type)


state 32

    4 declaration: idlist ':' type . ';'

    ';'  shift, and go to state 41


state 33

    7 idlist: idlist ',' ID .

    $default  reduce using rule 7 (idlist)


state 34

   27 break_stmt: BREAK ';' .

    $default  reduce using rule 27 (break_stmt)


state 35

   22 if_stmt: IF ')' . boolexpr '(' stmt ELSE stmt

    $default  reduce using rule 32 (boolexpr)

    boolexpr  go to state 42


state 36

   19 input_stmt: INPUT '(' . ID ')' ';'

    ID  shift, and go to state 43


state 37

   20 output_stmt: OUTPUT '(' . expression ')' ';'

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    expression  go to state 47
    term        go to state 48
    factor      go to state 49


state 38

   24 switch_stmt: SWITCH '(' . expression ')' '{' caselist DEFAULT ':' stmtlist '}'

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    expression  go to state 50
    term        go to state 48
    factor      go to state 49


state 39

   23 while_stmt: WHILE ')' . boolexpr '(' stmt

    $default  reduce using rule 32 (boolexpr)

    boolexpr  go to state 51


state 40

   18 assignment_stmt: ID '=' . expression ';'
   21 cast_stmt: ID '=' . STATIC_CAST '(' type ')' '(' expression ')' ';'

    STATIC_CAST  shift, and go to state 52
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    '('          shift, and go to state 46

    expression  go to state 53
    term        go to state 48
    factor      go to state 49


state 41

    4 declaration: idlist ':' type ';' .

    $default  reduce using rule 4 (declaration)


state 42

   22 if_stmt: IF ')' boolexpr . '(' stmt ELSE stmt
   31 boolexpr: boolexpr . OR boolterm

    OR   shift, and go to state 54
    '('  shift, and go to state 55


state 43

   19 input_stmt: INPUT '(' ID . ')' ';'

    ')'  shift, and go to state 56


state 44

   42 factor: ID .

    $default  reduce using rule 42 (factor)


state 45

   43 factor: NUM .

    $default  reduce using rule 43 (factor)


state 46

   41 factor: '(' . expression ')'

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    expression  go to state 57
    term        go to state 48
    factor      go to state 49


state 47

   20 output_stmt: OUTPUT '(' expression . ')' ';'
   37 expression: expression . ADDOP term

    ADDOP  shift, and go to state 58
    ')'    shift, and go to state 59


state 48

   38 expression: term .
   39 term: term . MULOP factor

    MULOP  shift, and go to state 60

    $default  reduce using rule 38 (expression)


state 49

   40 term: factor .

    $default  reduce using rule 40 (term)


state 50

   24 switch_stmt: SWITCH '(' expression . ')' '{' caselist DEFAULT ':' stmtlist '}'
   37 expression: expression . ADDOP term

    ADDOP  shift, and go to state 58
    ')'    shift, and go to state 61


state 51

   23 while_stmt: WHILE ')' boolexpr . '(' stmt
   31 boolexpr: boolexpr . OR boolterm

    OR   shift, and go to state 54
    '('  shift, and go to state 62


state 52

   21 cast_stmt: ID '=' STATIC_CAST . '(' type ')' '(' expression ')' ';'

    '('  shift, and go to state 63


state 53

   18 assignment_stmt: ID '=' expression . ';'
   37 expression: expression . ADDOP term

    ADDOP  shift, and go to state 58
    ';'    shift, and go to state 64


state 54

   31 boolexpr: boolexpr OR . boolterm

    $default  reduce using rule 34 (boolterm)

    boolterm  go to state 65


state 55

   22 if_stmt: IF ')' boolexpr '(' . stmt ELSE stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5

    stmt             go to state 66
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 56

   19 input_stmt: INPUT '(' ID ')' . ';'

    ';'  shift, and go to state 67


state 57

   37 expression: expression . ADDOP term
   41 factor: '(' expression . ')'

    ADDOP  shift, and go to state 58
    ')'    shift, and go to state 68


state 58

   37 expression: expression ADDOP . term

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    term    go to state 69
    factor  go to state 49


state 59

   20 output_stmt: OUTPUT '(' expression ')' . ';'

    ';'  shift, and go to state 70


state 60

   39 term: term MULOP . factor

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    factor  go to state 71


state 61

   24 switch_stmt: SWITCH '(' expression ')' . '{' caselist DEFAULT ':' stmtlist '}'

    '{'  shift, and go to state 72


state 62

   23 while_stmt: WHILE ')' boolexpr '(' . stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5

    stmt             go to state 73
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 63

   21 cast_stmt: ID '=' STATIC_CAST '(' . type ')' '(' expression ')' ';'

    FLOAT  shift, and go to state 30
    INT    shift, and go to state 31

    type  go to state 74


state 64

   18 assignment_stmt: ID '=' expression ';' .

    $default  reduce using rule 18 (assignment_stmt)


state 65

   31 boolexpr: boolexpr OR boolterm .
   33 boolterm: boolterm . AND boolfactor

    AND  shift, and go to state 75

    $default  reduce using rule 31 (boolexpr)


state 66

   22 if_stmt: IF ')' boolexpr '(' stmt . ELSE stmt

    ELSE  shift, and go to state 76


state 67

   19 input_stmt: INPUT '(' ID ')' ';' .

    $default  reduce using rule 19 (input_stmt)


state 68

   41 factor: '(' expression ')' .

    $default  reduce using rule 41 (factor)


state 69

   37 expression: expression ADDOP term .
   39 term: term . MULOP factor

    MULOP  shift, and go to state 60

    $default  reduce using rule 37 (expression)


state 70

   20 output_stmt: OUTPUT '(' expression ')' ';' .

    $default  reduce using rule 20 (output_stmt)


state 71

   39 term: term MULOP factor .

    $default  reduce using rule 39 (term)


state 72

   24 switch_stmt: SWITCH '(' expression ')' '{' . caselist DEFAULT ':' stmtlist '}'

    $default  reduce using rule 26 (caselist)

    caselist  go to state 77


state 73

   23 while_stmt: WHILE ')' boolexpr '(' stmt .

    $default  reduce using rule 23 (while_stmt)


state 74

   21 cast_stmt: ID '=' STATIC_CAST '(' type . ')' '(' expression ')' ';'

    ')'  shift, and go to state 78


state 75

   33 boolterm: boolterm AND . boolfactor

    NOT  shift, and go to state 79
    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    boolfactor  go to state 80
    expression  go to state 81
    term        go to state 48
    factor      go to state 49


state 76

   22 if_stmt: IF ')' boolexpr '(' stmt ELSE . stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5

    stmt             go to state 82
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 77

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist . DEFAULT ':' stmtlist '}'
   25 caselist: caselist . CASE NUM ':' stmtlist

    CASE     shift, and go to state 83
    DEFAULT  shift, and go to state 84


state 78

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' . '(' expression ')' ';'

    '('  shift, and go to state 85


state 79

   35 boolfactor: NOT . '(' boolexpr ')'

    '('  shift, and go to state 86


state 80

   33 boolterm: boolterm AND boolfactor .

    $default  reduce using rule 33 (boolterm)


state 81

   36 boolfactor: expression . RELOP expression
   37 expression: expression . ADDOP term

    RELOP  shift, and go to state 87
    ADDOP  shift, and go to state 58


state 82

   22 if_stmt: IF ')' boolexpr '(' stmt ELSE stmt .

    $default  reduce using rule 22 (if_stmt)


state 83

   25 caselist: caselist CASE . NUM ':' stmtlist

    NUM  shift, and go to state 88


state 84

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist DEFAULT . ':' stmtlist '}'

    ':'  shift, and go to state 89


state 85

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' '(' . expression ')' ';'

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    expression  go to state 90
    term        go to state 48
    factor      go to state 49


state 86

   35 boolfactor: NOT '(' . boolexpr ')'

    $default  reduce using rule 32 (boolexpr)

    boolexpr  go to state 91


state 87

   36 boolfactor: expression RELOP . expression

    ID   shift, and go to state 44
    NUM  shift, and go to state 45
    '('  shift, and go to state 46

    expression  go to state 92
    term        go to state 48
    factor      go to state 49


state 88

   25 caselist: caselist CASE NUM . ':' stmtlist

    ':'  shift, and go to state 93


state 89

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist DEFAULT ':' . stmtlist '}'

    $default  reduce using rule 30 (stmtlist)

    stmtlist  go to state 94


state 90

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' '(' expression . ')' ';'
   37 expression: expression . ADDOP term

    ADDOP  shift, and go to state 58
    ')'    shift, and go to state 95


state 91

   31 boolexpr: boolexpr . OR boolterm
   35 boolfactor: NOT '(' boolexpr . ')'

    OR   shift, and go to state 54
    ')'  shift, and go to state 96


state 92

   36 boolfactor: expression RELOP expression .
   37 expression: expression . ADDOP term

    ADDOP  shift, and go to state 58

    $default  reduce using rule 36 (boolfactor)


state 93

   25 caselist: caselist CASE NUM ':' . stmtlist

    $default  reduce using rule 30 (stmtlist)

    stmtlist  go to state 97


state 94

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist DEFAULT ':' stmtlist . '}'
   29 stmtlist: stmtlist . stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5
    '}'     shift, and go to state 98

    stmt             go to state 20
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 95

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' '(' expression ')' . ';'

    ';'  shift, and go to state 99


state 96

   35 boolfactor: NOT '(' boolexpr ')' .

    $default  reduce using rule 35 (boolfactor)


state 97

   25 caselist: caselist CASE NUM ':' stmtlist .
   29 stmtlist: stmtlist . stmt

    BREAK   shift, and go to state 12
    IF      shift, and go to state 13
    INPUT   shift, and go to state 14
    OUTPUT  shift, and go to state 15
    SWITCH  shift, and go to state 16
    WHILE   shift, and go to state 17
    ID      shift, and go to state 18
    '{'     shift, and go to state 5

    $default  reduce using rule 25 (caselist)

    stmt             go to state 20
    assignment_stmt  go to state 21
    input_stmt       go to state 22
    output_stmt      go to state 23
    cast_stmt        go to state 24
    if_stmt          go to state 25
    while_stmt       go to state 26
    switch_stmt      go to state 27
    break_stmt       go to state 28
    stmt_block       go to state 29


state 98

   24 switch_stmt: SWITCH '(' expression ')' '{' caselist DEFAULT ':' stmtlist '}' .

    $default  reduce using rule 24 (switch_stmt)


state 99

   21 cast_stmt: ID '=' STATIC_CAST '(' type ')' '(' expression ')' ';' .

    $default  reduce using rule 21 (cast_stmt)
